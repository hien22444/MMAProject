import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  Image
} from 'react-native';

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu
interface Notification {
  id: string;
  title: string;
  message: string;
  type: 'order' | 'promotion' | 'news' | 'review';
  isRead: boolean;
  createdAt: string;
  imageUrl: string | null;
}

// D·ªØ li·ªáu m·∫´u th√¥ng b√°o
const notificationData: Notification[] = [
  {
    id: '1',
    title: 'ƒê∆°n h√†ng ƒë√£ giao th√†nh c√¥ng!',
    message: 'ƒê∆°n h√†ng #ORD-001 ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.',
    type: 'order',
    isRead: true,
    createdAt: '2025-06-03T15:20:00.000Z',
    imageUrl: null
  },
  {
    id: '2',
    title: 'Khuy·∫øn m√£i m·ªõi: Gi·∫£m gi√° 20%',
    message: 'Gi·∫£m gi√° 20% cho t·∫•t c·∫£ c√°c s·∫£n ph·∫©m th·ªùi trang m√πa h√®. Nhanh tay mua s·∫Øm n√†o!',
    type: 'promotion',
    isRead: false,
    createdAt: '2025-06-05T10:20:00.000Z',
    imageUrl: 'https://example.com/images/promotion.jpg'
  },
  {
    id: '3',
    title: 'ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao',
    message: 'ƒê∆°n h√†ng #ORD-002 c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c giao. D·ª± ki·∫øn giao h√†ng trong v√≤ng 2 ng√†y t·ªõi.',
    type: 'order',
    isRead: false,
    createdAt: '2025-06-04T14:10:00.000Z',
    imageUrl: null
  },
  {
    id: '4',
    title: 'B·ªô s∆∞u t·∫≠p m·ªõi ƒë√£ ra m·∫Øt!',
    message: 'B·ªô s∆∞u t·∫≠p m√πa thu 2025 ƒë√£ ch√≠nh th·ª©c ra m·∫Øt v·ªõi nhi·ªÅu thi·∫øt k·∫ø ƒë·ªôc ƒë√°o. Kh√°m ph√° ngay!',
    type: 'news',
    isRead: true,
    createdAt: '2025-06-01T09:30:00.000Z',
    imageUrl: 'https://example.com/images/collection.jpg'
  },
  {
    id: '5',
    title: '∆Øu ƒë√£i sinh nh·∫≠t',
    message: 'Ch√∫c m·ª´ng sinh nh·∫≠t! Nh·∫≠n ngay voucher gi·∫£m gi√° 100,000ƒë cho ƒë∆°n h√†ng ti·∫øp theo c·ªßa b·∫°n.',
    type: 'promotion',
    isRead: false,
    createdAt: '2025-05-28T08:20:00.000Z',
    imageUrl: 'https://example.com/images/birthday.jpg'
  },
  {
    id: '6',
    title: 'Nh·∫≠n x√©t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng',
    message: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m "√Åo Thun Unisex Basic". Nh·∫≠n x√©t c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng c√¥ng khai.',
    type: 'review',
    isRead: true,
    createdAt: '2025-05-25T14:50:00.000Z',
    imageUrl: null
  },
  {
    id: '7',
    title: 'ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy',
    message: 'ƒê∆°n h√†ng #ORD-004 ƒë√£ b·ªã h·ªßy theo y√™u c·∫ßu c·ªßa b·∫°n. Ti·ªÅn s·∫Ω ƒë∆∞·ª£c ho√†n tr·∫£ trong 3-5 ng√†y l√†m vi·ªác.',
    type: 'order',
    isRead: true,
    createdAt: '2025-06-02T15:30:00.000Z',
    imageUrl: null
  }
];

const NotificationScreen = () => {
  const [notifications, setNotifications] = useState<Notification[]>(notificationData);
  const [filter, setFilter] = useState<string | null>(null);

  // L·ªçc th√¥ng b√°o theo lo·∫°i
  const filteredNotifications = filter
    ? notifications.filter(item => item.type === filter)
    : notifications;

  // ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc th√¥ng b√°o
  const handleMarkAsRead = (id: string) => {
    setNotifications(
      notifications.map(item =>
        item.id === id ? { ...item, isRead: true } : item
      )
    );
  };

  // ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
  const handleMarkAllAsRead = () => {
    setNotifications(
      notifications.map(item => ({ ...item, isRead: true }))
    );
  };

  // X√≥a th√¥ng b√°o
  const handleDeleteNotification = (id: string) => {
    setNotifications(notifications.filter(item => item.id !== id));
  };

  // X·ª≠ l√Ω l·ªçc
  const handleFilter = (filterType: string | null) => {
    setFilter(filterType === filter ? null : filterType);
  };

  // Format th·ªùi gian
  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));

    if (diffInDays === 0) {
      return 'H√¥m nay';
    } else if (diffInDays === 1) {
      return 'H√¥m qua';
    } else if (diffInDays < 7) {
      return `${diffInDays} ng√†y tr∆∞·ªõc`;
    } else {
      return date.toLocaleDateString('vi-VN');
    }
  };

  // Bi·ªÉu t∆∞·ª£ng cho lo·∫°i th√¥ng b√°o
  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'order':
        return 'üì¶';
      case 'promotion':
        return 'üéÅ';
      case 'news':
        return 'üì¢';
      case 'review':
        return '‚≠ê';
      default:
        return 'üì£';
    }
  };

  // Render m·ªôt m·ª•c th√¥ng b√°o
  const renderNotificationItem = ({ item }: { item: Notification }) => (
    <TouchableOpacity
      style={[styles.notificationItem, !item.isRead && styles.unreadItem]}
      onPress={() => handleMarkAsRead(item.id)}
    >
      <View style={styles.notificationIcon}>
        <Text style={styles.iconText}>{getNotificationIcon(item.type)}</Text>
      </View>

      <View style={styles.notificationContent}>
        <View style={styles.notificationHeader}>
          <Text style={styles.notificationTitle} numberOfLines={1}>{item.title}</Text>
          <Text style={styles.notificationTime}>{formatTime(item.createdAt)}</Text>
        </View>

        <Text style={styles.notificationMessage} numberOfLines={2}>{item.message}</Text>

        {item.imageUrl && (
          <Image
            source={{ uri: item.imageUrl }}
            style={styles.notificationImage}
          />
        )}

        <View style={styles.notificationActions}>
          {!item.isRead && (
            <TouchableOpacity onPress={() => handleMarkAsRead(item.id)}>
              <Text style={styles.actionText}>ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc</Text>
            </TouchableOpacity>
          )}

          <TouchableOpacity onPress={() => handleDeleteNotification(item.id)}>
            <Text style={[styles.actionText, styles.deleteText]}>X√≥a</Text>
          </TouchableOpacity>
        </View>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.heading}>Th√¥ng b√°o</Text>

      {/* C√°c b·ªô l·ªçc */}
      <View style={styles.filterContainer}>
        <TouchableOpacity
          style={[styles.filterButton, filter === null && styles.activeFilter]}
          onPress={() => handleFilter(null)}
        >
          <Text style={[styles.filterText, filter === null && styles.activeFilterText]}>
            T·∫•t c·∫£
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.filterButton, filter === 'order' && styles.activeFilter]}
          onPress={() => handleFilter('order')}
        >
          <Text style={[styles.filterText, filter === 'order' && styles.activeFilterText]}>
            ƒê∆°n h√†ng
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.filterButton, filter === 'promotion' && styles.activeFilter]}
          onPress={() => handleFilter('promotion')}
        >
          <Text style={[styles.filterText, filter === 'promotion' && styles.activeFilterText]}>
            Khuy·∫øn m√£i
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.filterButton, filter === 'news' && styles.activeFilter]}
          onPress={() => handleFilter('news')}
        >
          <Text style={[styles.filterText, filter === 'news' && styles.activeFilterText]}>
            Tin t·ª©c
          </Text>
        </TouchableOpacity>
      </View>

      {/* ƒê√°nh d·∫•u ƒë·ªçc t·∫•t c·∫£ */}
      {notifications.some(item => !item.isRead) && (
        <TouchableOpacity
          style={styles.markAllButton}
          onPress={handleMarkAllAsRead}
        >
          <Text style={styles.markAllText}>ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc</Text>
        </TouchableOpacity>
      )}

      {/* Danh s√°ch th√¥ng b√°o */}
      <FlatList
        data={filteredNotifications}
        renderItem={renderNotificationItem}
        keyExtractor={(item) => item.id}
        contentContainerStyle={styles.notificationList}
        showsVerticalScrollIndicator={false}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text style={styles.emptyText}>Kh√¥ng c√≥ th√¥ng b√°o n√†o</Text>
          </View>
        }
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f8f8',
    padding: 16,
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    color: '#333',
  },
  filterContainer: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  filterButton: {
    paddingVertical: 8,
    paddingHorizontal: 12,
    marginRight: 8,
    borderRadius: 20,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#ddd',
  },
  filterText: {
    fontSize: 14,
    color: '#666',
  },
  activeFilter: {
    backgroundColor: '#E91E63',
    borderColor: '#E91E63',
  },
  activeFilterText: {
    color: '#fff',
    fontWeight: '500',
  },
  markAllButton: {
    alignSelf: 'flex-end',
    marginBottom: 16,
  },
  markAllText: {
    color: '#E91E63',
    fontSize: 14,
    fontWeight: '500',
  },
  notificationList: {
    paddingBottom: 16,
  },
  notificationItem: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    borderRadius: 8,
    marginBottom: 12,
    padding: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  unreadItem: {
    borderLeftWidth: 4,
    borderLeftColor: '#E91E63',
  },
  notificationIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#f1f1f1',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  iconText: {
    fontSize: 18,
  },
  notificationContent: {
    flex: 1,
  },
  notificationHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 6,
  },
  notificationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    flex: 1,
    marginRight: 8,
  },
  notificationTime: {
    fontSize: 12,
    color: '#999',
  },
  notificationMessage: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  notificationImage: {
    width: '100%',
    height: 150,
    borderRadius: 6,
    marginBottom: 8,
    backgroundColor: '#f5f5f5',
  },
  notificationActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
  },
  actionText: {
    fontSize: 14,
    color: '#E91E63',
    marginLeft: 16,
  },
  deleteText: {
    color: '#ff6b6b',
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  emptyText: {
    fontSize: 16,
    color: '#999',
  },
});

export default NotificationScreen;
