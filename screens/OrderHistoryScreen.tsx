import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  Dimensions,
  TouchableOpacity,
  Alert,
} from 'react-native';
import { TabView, SceneMap, TabBar } from 'react-native-tab-view';

type OrderStatus =
  | 'Ch·ªù x√°c nh·∫≠n'
  | 'Ch·ªù l·∫•y h√†ng'
  | 'Ch·ªù giao h√†ng'
  | 'ƒê√£ giao'
  | 'Tr·∫£ h√†ng'
  | 'ƒê√£ h·ªßy';

type Order = {
  id: string;
  date: string;
  status: OrderStatus;
  total: string;
};

const statusFlow: { [key in OrderStatus]?: OrderStatus } = {
  'Ch·ªù x√°c nh·∫≠n': 'Ch·ªù l·∫•y h√†ng',
  'Ch·ªù l·∫•y h√†ng': 'Ch·ªù giao h√†ng',
};

const initialOrders: Order[] = [
  { id: 'DH001', date: '2025-06-10', status: 'ƒê√£ giao', total: '599.000‚Ç´' },
  { id: 'DH002', date: '2025-06-11', status: 'Ch·ªù x√°c nh·∫≠n', total: '259.000‚Ç´' },
  { id: 'DH003', date: '2025-06-12', status: 'Ch·ªù l·∫•y h√†ng', total: '349.000‚Ç´' },
  { id: 'DH004', date: '2025-06-13', status: 'Ch·ªù giao h√†ng', total: '499.000‚Ç´' },
  { id: 'DH005', date: '2025-06-14', status: 'Tr·∫£ h√†ng', total: '299.000‚Ç´' },
  { id: 'DH006', date: '2025-06-15', status: 'ƒê√£ h·ªßy', total: '199.000‚Ç´' },
];

const getStatusColor = (status: OrderStatus) => {
  switch (status) {
    case 'ƒê√£ giao':
      return { color: 'green' };
    case 'Ch·ªù x√°c nh·∫≠n':
    case 'Ch·ªù l·∫•y h√†ng':
    case 'Ch·ªù giao h√†ng':
      return { color: 'orange' };
    case 'Tr·∫£ h√†ng':
      return { color: 'blue' };
    case 'ƒê√£ h·ªßy':
      return { color: 'red' };
    default:
      return {};
  }
};

const OrderItem = ({ order, onAction }: { order: Order; onAction: (id: string, action: string) => void }) => (
  <View style={styles.card}>
    <View style={styles.row}>
      <Text style={styles.label}>M√£ ƒë∆°n:</Text>
      <Text style={styles.value}>{order.id}</Text>
    </View>
    <View style={styles.row}>
      <Text style={styles.label}>Ng√†y:</Text>
      <Text style={styles.value}>{order.date}</Text>
    </View>
    <View style={styles.row}>
      <Text style={styles.label}>Tr·∫°ng th√°i:</Text>
      <Text style={[styles.value, getStatusColor(order.status)]}>{order.status}</Text>
    </View>
    <View style={styles.row}>
      <Text style={styles.label}>T·ªïng:</Text>
      <Text style={styles.value}>{order.total}</Text>
    </View>

    {/* Action buttons */}
    {order.status === 'Ch·ªù x√°c nh·∫≠n' && (
      <TouchableOpacity onPress={() => onAction(order.id, 'cancel')}>
        <Text style={styles.action}>‚ùå H·ªßy ƒë∆°n</Text>
      </TouchableOpacity>
    )}
    {order.status === 'Ch·ªù giao h√†ng' && (
      <TouchableOpacity onPress={() => onAction(order.id, 'received')}>
        <Text style={styles.action}>‚úÖ ƒê√£ nh·∫≠n ƒë∆°n h√†ng</Text>
      </TouchableOpacity>
    )}
    {order.status === 'ƒê√£ giao' && (
      <TouchableOpacity onPress={() => onAction(order.id, 'return')}>
        <Text style={styles.action}>‚Ü©Ô∏è Tr·∫£ h√†ng</Text>
      </TouchableOpacity>
    )}
  </View>
);

export default function OrderHistoryScreen() {
  const [index, setIndex] = useState(0);
  const [routes] = useState([
    { key: 'ChoXacNhan', title: 'Ch·ªù x√°c nh·∫≠n' },
    { key: 'ChoLayHang', title: 'Ch·ªù l·∫•y h√†ng' },
    { key: 'ChoGiaoHang', title: 'Ch·ªù giao h√†ng' },
    { key: 'DaGiao', title: 'ƒê√£ giao' },
    { key: 'TraHang', title: 'Tr·∫£ h√†ng' },
    { key: 'DaHuy', title: 'ƒê√£ h·ªßy' },
  ]);

  const [orders, setOrders] = useState<Order[]>(initialOrders);

  // Auto transition every 8s
  useEffect(() => {
    const interval = setInterval(() => {
      setOrders((prev) =>
        prev.map((o) => {
          if (o.status === 'Ch·ªù x√°c nh·∫≠n' || o.status === 'Ch·ªù l·∫•y h√†ng') {
            return { ...o, status: statusFlow[o.status] || o.status };
          }
          return o;
        })
      );
    }, 8000);

    return () => clearInterval(interval);
  }, []);

  const handleAction = (id: string, action: string) => {
    setOrders((prev) =>
      prev.map((o) => {
        if (o.id !== id) return o;
        if (action === 'cancel') return { ...o, status: 'ƒê√£ h·ªßy' };
        if (action === 'received') return { ...o, status: 'ƒê√£ giao' };
        if (action === 'return') return { ...o, status: 'Tr·∫£ h√†ng' };
        return o;
      })
    );
  };

  const renderScene = SceneMap({
    ChoXacNhan: () => renderList('Ch·ªù x√°c nh·∫≠n'),
    ChoLayHang: () => renderList('Ch·ªù l·∫•y h√†ng'),
    ChoGiaoHang: () => renderList('Ch·ªù giao h√†ng'),
    DaGiao: () => renderList('ƒê√£ giao'),
    TraHang: () => renderList('Tr·∫£ h√†ng'),
    DaHuy: () => renderList('ƒê√£ h·ªßy'),
  });

  const renderList = (status: OrderStatus) => {
    const filtered = orders.filter((o) => o.status === status);
    return (
      <FlatList
        data={filtered}
        keyExtractor={(item) => item.id}
        renderItem={({ item }) => <OrderItem order={item} onAction={handleAction} />}
        ListEmptyComponent={<Text style={{ textAlign: 'center', marginTop: 20 }}>Kh√¥ng c√≥ ƒë∆°n h√†ng</Text>}
      />
    );
  };

  return (
    <View style={{ flex: 1, paddingTop: 40 }}>
      <Text style={styles.header}>üßæ ƒê∆°n mua</Text>
      <TabView
        navigationState={{ index, routes }}
        renderScene={renderScene}
        onIndexChange={setIndex}
        initialLayout={{ width: Dimensions.get('window').width }}
        renderTabBar={(props) => (
          <TabBar
            {...props}
            indicatorStyle={{ backgroundColor: '#000' }}
            style={{ backgroundColor: '#fff' }}
            activeColor="#000"
            inactiveColor="#888"
            scrollEnabled
            tabStyle={{ width: 150 }}
          />
        )}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  header: {
    fontSize: 20,
    fontWeight: 'bold',
    marginLeft: 16,
    marginBottom: 10,
  },
  card: {
    backgroundColor: '#fff',
    marginHorizontal: 16,
    marginBottom: 12,
    padding: 16,
    borderRadius: 10,
    elevation: 2,
  },
  row: {
    flexDirection: 'row',
    marginBottom: 6,
  },
  label: {
    width: 100,
    fontWeight: '600',
    color: '#333',
  },
  value: {
    flex: 1,
    color: '#555',
  },
  action: {
    marginTop: 10,
    color: '#007bff',
    fontWeight: 'bold',
  },
});
